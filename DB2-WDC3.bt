#include "basics.h"

struct wdc3_db2_header
{
  uint32_t magic;                  // 'WDC3'
Assert (magic == 0x33434457, "Magic shall be 'WDC3', wrong template!");
  uint32_t record_count;           // this is for all sections combined now
  uint32_t field_count;
  uint32_t record_size;
  uint32_t string_table_size;      // this is for all sections combined now
  uint32_t table_hash;             // hash of the table name
  uint32_t layout_hash;            // this is a hash field that changes only when the structure of the data changes
  uint32_t min_id;
  uint32_t max_id;
  uint32_t locale;                 // as seen in TextWowEnum
  uint16_t flags;                  // possible values are listed in Known Flag Meanings
  uint16_t id_index;               // this is the index of the field containing ID values; this is ignored if flags & 0x04 != 0
  uint32_t total_field_count;      // from WDC1 onwards, this value seems to always be the same as the 'field_count' value
  uint32_t bitpacked_data_offset;  // relative position in record where bitpacked data begins; not important for parsing the file
  uint32_t lookup_column_count;
  uint32_t field_storage_info_size;
  uint32_t common_data_size;
  uint32_t pallet_data_size;
  uint32_t section_count;          // new to WDC2, this is number of sections of data
};
wdc3_db2_header header;

// a section = records + string block + id list + copy table + offset map + offset map id list + relationship map
struct wdc3_section_header
{
  uint64_t tact_key_hash;          // TactKeyLookup hash
  uint32_t file_offset;            // absolute position to the beginning of the section
  uint32_t record_count;           // 'record_count' for the section
  uint32_t string_table_size;      // 'string_table_size' for the section
  uint32_t offset_records_end;     // Offset to the spot where the records end in a file with an offset map structure;
  uint32_t id_list_size;           // Size of the list of ids present in the section
  uint32_t relationship_data_size; // Size of the relationship data in the section
  uint32_t offset_map_id_count;    // Count of ids present in the offset map in the section
  uint32_t copy_table_count;       // Count of the number of deduplication entries (you can multiply by 8 to mimic the old 'copy_table_size' field)
};
wdc3_section_header section_headers[header.section_count];

struct field_structure
{
   int16_t size;                   // size in bits as calculated by: byteSize = (32 - size) / 8; this value can be negative to indicate field sizes larger than 32-bits
   uint16_t position;              // position of the field within the record, relative to the start of the record
};
field_structure fields[header.total_field_count];

enum field_compression
{
  // None -- the field is a 8-, 16-, 32-, or 64-bit integer in the record data
  field_compression_none,
  // Bitpacked -- the field is a bitpacked integer in the record data.  It
  // is field_size_bits long and starts at field_offset_bits.
  // A bitpacked value occupies
  //   (field_size_bits + (field_offset_bits & 7) + 7) / 8
  // bytes starting at byte
  //   field_offset_bits / 8
  // in the record data.  These bytes should be read as a little-endian value,
  // then the value is shifted to the right by (field_offset_bits & 7) and
  // masked with ((1ull << field_size_bits) - 1).
  field_compression_bitpacked,
  // Common data -- the field is assumed to be a default value, and exceptions
  // from that default value are stored in the corresponding section in
  // common_data as pairs of { uint32_t record_id; uint32_t value; }.
  field_compression_common_data,
  // Bitpacked indexed -- the field has a bitpacked index in the record data.
  // This index is used as an index into the corresponding section in
  // pallet_data.  The pallet_data section is an array of uint32_t, so the index
  // should be multiplied by 4 to obtain a byte offset.
  field_compression_bitpacked_indexed,
  // Bitpacked indexed array -- the field has a bitpacked index in the record
  // data.  This index is used as an index into the corresponding section in
  // pallet_data.  The pallet_data section is an array of uint32_t[array_count],
  //
  field_compression_bitpacked_indexed_array,
  // Same as field_compression_bitpacked
  field_compression_bitpacked_signed,
};

typedef struct
{
  uint16_t          field_offset_bits;
  uint16_t          field_size_bits; // very important for reading bitpacked fields; size is the sum of all array pieces in bits - for example, uint32[3] will appear here as '96'
  // additional_data_size is the size in bytes of the corresponding section in
  // common_data or pallet_data.  These sections are in the same order as the
  // field_info, so to find the offset, add up the additional_data_size of any
  // previous fields which are stored in the same block (common_data or
  // pallet_data).
  uint32_t          additional_data_size;
  field_compression storage_type;
  switch (storage_type)
  {
    case field_compression_bitpacked:
    case field_compression_bitpacked_signed:
      uint32_t bitpacking_offset_bits; // not useful for most purposes; formula they use to calculate is bitpacking_offset_bits = field_offset_bits - (header.bitpacked_data_offset * 8)
      uint32_t bitpacking_size_bits; // not useful for most purposes
      uint32_t flags; // known values - 0x01: sign-extend (signed)
      break;
    case field_compression_common_data:
      uint32_t default_value;
      uint32_t unk_or_unused2;
      uint32_t unk_or_unused3;
      break;
    case field_compression_bitpacked_indexed:
      uint32_t bitpacking_offset_bits; // not useful for most purposes; formula they use to calculate is bitpacking_offset_bits = field_offset_bits - (header.bitpacked_data_offset * 8)
      uint32_t bitpacking_size_bits; // not useful for most purposes
      uint32_t unk_or_unused3;
      break;
    case field_compression_bitpacked_indexed_array:
      uint32_t bitpacking_offset_bits; // not useful for most purposes; formula they use to calculate is bitpacking_offset_bits = field_offset_bits - (header.bitpacked_data_offset * 8)
      uint32_t bitpacking_size_bits; // not useful for most purposes
      uint32_t array_count;
      break;
    default:
      uint32_t unk_or_unused1;
      uint32_t unk_or_unused2;
      uint32_t unk_or_unused3;
      break;
  }
} field_storage_info<size=0x18>;
field_storage_info field_info[header.field_storage_info_size / sizeof(field_storage_info)];
char pallet_data[header.pallet_data_size];
char common_data[header.common_data_size];

struct section
{
  if ((header.flags & 1) == 0) {
    // Normal records
    struct record_data
    {
      char data[header.record_size];
    };
    record_data records[section_headers.record_count];
    char string_data[section_headers.string_table_size];
  } else {
    // Offset map records -- these records have null-terminated strings inlined, and
    // since they are variable-length, they are pointed to by an array of 6-byte offset+size pairs.
    char variable_record_data[section_headers.offset_records_end - section_headers.file_offset];
  }

  uint32_t id_list[section_headers.id_list_size / 4];
  if (section_headers.copy_table_count > 0) {
    struct copy_table_entry
    {
      uint32_t id_of_new_row;
      uint32_t id_of_copied_row;
    };
    copy_table_entry copy_table[section_headers.copy_table_count];
  }
  struct offset_map_entry
  {
    uint32_t offset;
    uint16_t size;
  };
  offset_map_entry offset_map[section_headers.offset_map_id_count];
  if (section_headers.relationship_data_size > 0) {
    // In some tables, this relationship mapping replaced columns that were used only as a lookup, such as the SpellID in SpellX* tables.
    struct relationship_entry
    {
      // This is the id of the foreign key for the record, e.g. SpellID in SpellX* tables.
      uint32_t foreign_id;
      // This is the index of the record in record_data.  Note that this is *not* the record's own ID.
      uint32_t record_index;
    };
    struct relationship_mapping
    {
      uint32_t            num_entries;
      uint32_t            min_id;
      uint32_t            max_id;
      relationship_entry  entries[num_entries];
    };
    relationship_mapping relationship_map;
  }
  uint32_t offset_map_id_list[section_headers.offset_map_id_count];
};
section data_sections[header.section_count];
